#!/bin/bash 

#------------------------------------------------------------------------------#
#
# See `workflow.sh` example file as a template to design your own workflows.
#
#       Args to this script are:
#
#       1          2          3        4        5       6        7
# roundnumber   projname wkloadtype  ntask  mdsteps tjsteps afterntjs
#
#       8          9         10       11       12      13       14       15
# anlyztjlength samplefunc minutes execflag sysname  mfreq     pfreq  platform
#
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
#
#
# application - Instance of AdaptiveMD that runs on head node before job. This
#               instance seeds tasks that constitute AdaptiveMD workloads. It
#               shuts down after issueing tasks, and comes back up for each
#               call to this script from `workflow.sh`.
#
#               There is currently no
#               ability to change the database address during a live instance,
#               so as the database is moved to compute nodes for job execution,
#               this instance is just shut down by design.
#
#               For small-scale
#               workflows, you could just have workers tunnel out from compute
#               nodes to the database instance on head node, but your admin
#               will probably get upset pretty quickly that you are opening
#               tons of connections and causing large network traffic between
#               head node and compute node as each worker connects to mongod
#               instance individually.
#
#
# controller  - Instance of AdaptiveMD that runs during job to shut down
#               workers after they are done. In the case of running multiple
#               tasks inside single job, this instance would issue new tasks
#               while the job is running before shutting down the workers.
#
#               TODO FIXME currently there is a hardcoded 1:1 relationship
#               between `admd_workload` calls and rounds of AdaptiveMD tasks,
#               but this is only due to hardcoding in the file `runtime`
#
#
#------------------------------------------------------------------------------#
#TODO write "Error" in exit conditions
#------------------------------------------------------------------------------#
echo "Got these arguments for AdaptiveMD workload:"
echo $@

echo "Using AdaptiveMDWorkers to Execute workload"
echo "Workload wall time is ${10} minutes"

exitval="-1"

#------------------------------------------------------------------------------#
# Input Argument processing

# FIXME never shows up below
ROUNDNUMBER="$1"
PROJNAME="$2"
# types: `trajs`, `model`, `cleanup`, or `all`
#  - type causes modification to application arguments downstream
WORKLOAD="$3"
NTRAJS="$4"
MDSTEPS="$5"
TRAJSTEPS="$6"
AFTERNTRAJS="$7"
# FIXME never shows up below
MODELTRAJLENGTH="$8"
SAMPLEFUNC="$9"
MINUTES="${10}"
EXECFLAG="--submit_only"

# Splitting a single command with DB parent folder and port number
DLM=":"
DBHOME=$(echo ${11} | awk -F"$DLM" '{print $1}')
DBPORT=$(echo ${11} | awk -F"$DLM" '{print $2}')
DBPERSIST=$(echo ${11} | awk -F"$DLM" '{print $3}')
CFGNAME=$(echo ${11} | awk -F"$DLM" '{print $4}')

# Fill in to use default port if None was given
if [ -z "$DBPORT" ]
then
  DBPORT="27017"
fi

# These ones only come with the first round
# to describe simulation setup
SYSTEMNAME="${12}"
MFREQUENCY="${13}"
PFREQUENCY="${14}"
PLATFORM="${15}"

# More Workload Control and Parameters
#  _ some derived from above
BATCHSLEEP="5"
BATCHSIZE="5000"
if [ "$EXECFLAG" = "--submit_only" ]
then
  BATCHWAIT=""
else
  BATCHWAIT="-u all"
fi

if [ $WORKLOAD = "cleanup" ]
then
  RESCUE_TASKS=""
else
  RESCUE_TASKS="--rescue_tasks"
fi

PROGRESS="any"

# This is environment variable is read by
# any local AdaptiveMD instances
# and inbound instances if persist is on
DBHOST=`ip addr show $ADMD_NETDEVICE | grep -Eo '(addr:)?([0-9]*\.){3}[0-9]*' | head -n1`
export ADMD_DBURL="mongodb://$DBHOST:$DBPORT/"

echo "Client ADMD_DBURL: $ADMD_DBURL"

ROUND_PER_WORKLOAD="1"

if [ "$DBPERSIST" = "persist" ]
then
    EXECFLAG+=" --persist"
fi

if [ ! -z "$CFGNAME" ]
then
    EXECFLAG+=" --config_name $CFGNAME"
fi

#------------------------------------------------------------------------------#
# Formulating args for adaptivemdruntime

generator="adaptivemdruntime $PROJNAME"

if [ ! -z "$SYSTEMNAME" ]
then
  # Initialize a project for the first time
  initializer="$generator $SYSTEMNAME --init_only"
  initializer+=" -P $PLATFORM -p $PFREQUENCY -m $MFREQUENCY"
fi

if [ ! -z "$ROUNDNUMBER" ]
then
  generator+=" -R $ROUNDNUMBER"
fi

generator+=" -r $ADMD_PROFILE"
generator+=" -s $BATCHSLEEP -c $BATCHSIZE $BATCHWAIT"
generator+=" --progress $PROGRESS"
generator+=" -l $MDSTEPS -k $TRAJSTEPS"
generator+=" -a $AFTERNTRAJS"

if [[ "$WORKLOAD" = "cleanup" ]]
then
  generator+=" -N 0"
elif [[ "$WORKLOAD" = "trajs" ]]
then
  generator+=" -N $NTRAJS -S $SAMPLEFUNC"
elif [[ "$WORKLOAD" = "model" ]]
then
  generator+=" -M pyemma -N 0 --min_model_trajlength $MODELTRAJLENGTH"
elif [[ "$WORKLOAD" = "all" ]]
then
  generator+=" -N $NTRAJS"
else
  echo "Workload argument choice of 'model','trajs','all','cleanup'"
  echo "Recieved argument: $WORKLOAD"
  exitval="-2"
  exit "$exitval"
fi

generator+=" -b $ROUND_PER_WORKLOAD"
generator+=" --minutes $MINUTES $EXECFLAG"

if [ ! -z "$RESCUE_TASKS" ]
then
  generator+=" $RESCUE_TASKS"
fi

#------------------------------------------------------------------------------#
# Launch database instance to run side-by-side with
# the AdaptiveMD application on head node

# If persist make sure we have a mongod process on the dbport running now
if [[ ( "$DBPERSIST" = "persist" ) && ( ! -z "$(netstat -tupnl | grep "$(list_mongods | awk -F" " '{print $2}')" | grep "mongod" | grep "$DBPORT" )" ) ]]
then
    echo "Found existing mongodb instance on port $DBPORT"
else
    echo "Starting database in directory '$DBHOME' on port '$DBPORT'"
    while [ -S "$DBHOME/socket/mongodb-${DBPORT}.sock" ]; do
        echo "Waiting for mongod release"
        sleep 3
    done
    sleep 3
    MPID="$(launch_amongod $DBHOME $DBPORT)"
    echo "Mongo DB process ID: $MPID"
fi

#------------------------------------------------------------------------------#
# Launch adaptivemdruntime

if [ ! -z "$initializer" ]; then
  echo "Initializing Project with this command"
  echo "To 'adaptivemdruntime':"
  echo "$initializer"

  eval "$initializer"
fi

echo "Starting 'adaptivemdruntime' with command:"
echo "$generator"

# Capture the exit status of AdaptiveMD Application
# - by parsing the last line
# - should be a code if errors handled correctly
APP_OUT=$(eval $generator)
APP_ID="$!"
## # TODO get process ID of subshell'd process
## echo "Waiting on application: $APP_ID"
## wait "$APP_ID"
IFS=$'\n' APP_OUT=($APP_OUT)

if [ -z "$APP_OUT" ]; then
  echo "Warning: No output recieved from AdaptiveMD Application"
else
  APP_STATUS="${APP_OUT[${#APP_OUT[@]}-1]}"
fi

echo "Got status '$APP_STATUS' from AdaptiveMD"

#------------------------------------------------------------------------------#
# Kill and cleanup database stuff

if [ ! "$DBPERSIST" = "persist" ]
then
    echo "Killing Mongo DB Process: $MPID"
    kill $MPID
    sleep 3
else
    echo "Mongod will persist on client application side"
    list_mongods
fi

# ## Sometimes shutdown doesn't happen nicely, we should not
# ## have to do this. But if the workflow is the only thing
# ## interacting with a database, should be safe... we are
# ## circumventing locks that prevent multiple access and
# ## enforce ACID compliance in the database.
# #if [ ! -z "$(ls -A $DBHOME/socket)" ]
# #then
# #  rm $DBHOME/socket/*
# #  rm $DBHOME/db/mongod.lock
# #fi

#------------------------------------------------------------------------------#
# Process adaptivemdruntime exit code

echo "Is $APP_STATUS found?: $(ls -grth $APP_STATUS)"

if [[ $APP_STATUS =~ ^[-+]?([1-9][[:digit:]]*|0)$ ]]
then
    if [[ $APP_STATUS -lt 0 ]]
    then
      echo "Exiting, AdaptiveMD application error"
      exitval="1"
    elif [[ $APP_STATUS -eq 0 ]]
    then
      echo "No incomplete/failed tasks, executed given workload"
      exitval="0"
    elif [[ $APP_STATUS -gt 0 ]]
    then
      # TODO trigger extra cleanup workloads
      echo "Exiting, found existing incomplete/failed tasks"
      exitval="0"
    else
      echo "This condition should not appear, already closed logic"
    fi
elif [ -f "$APP_STATUS" ]
then
    echo "Looking at job state file '$APP_STATUS' for 'COMPLETE' state"
    while [ ! "$(cat $APP_STATUS)" = "COMPLETE" ]
    do
        sleep 3
    done
else
    echo "Exiting, $APP_STATUS not castable as int"
    exitval="1"
fi

exit "$exitval"

